{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "history_visible": true,
      "authorship_tag": "ABX9TyN/+qsPD8KlVm8TF6ivNnkd",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/kavithapammi/IITM_AISCHOOL2023/blob/main/task2_kavi_chandu_solution\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import OneHotEncoder\n",
        "from sklearn.compose import ColumnTransformer\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.impute import SimpleImputer\n",
        "from sklearn.metrics import mean_absolute_error, mean_squared_error\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.linear_model import LinearRegression\n",
        "\n",
        "# Load the datasets\n",
        "train_data = pd.read_csv(\"train.csv\")\n",
        "test_data = pd.read_csv(\"test.csv\")\n",
        "sample_submission = pd.read_csv(\"sample_submission.csv\")\n",
        "\n",
        "# Check for missing values in the target column\n",
        "if train_data[\"target\"].isnull().any():\n",
        "    train_data.dropna(subset=[\"target\"], inplace=True)\n",
        "\n",
        "# Separate features and target column in the training data\n",
        "X = train_data.drop(columns=[\"target\"])\n",
        "y = train_data[\"target\"]\n",
        "\n",
        "# Split data into training and validation sets\n",
        "X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Preprocess categorical data using one-hot encoding\n",
        "categorical_features = ['var13', 'var15']  # Replace with actual categorical column names\n",
        "numerical_features = ['ID', 'var1','var2','var3','var4','var5','var6','var7','var8','var9','var10','var11','var12','var14']  # Replace with actual numerical column names\n",
        "\n",
        "# Create preprocessor\n",
        "preprocessor = ColumnTransformer(\n",
        "    transformers=[\n",
        "        ('num', SimpleImputer(strategy='mean'), numerical_features),\n",
        "        ('cat', OneHotEncoder(handle_unknown='ignore'), categorical_features)\n",
        "    ])\n",
        "\n",
        "# Model 1: Linear Regression\n",
        "model1 = Pipeline(steps=[('preprocessor', preprocessor),\n",
        "                         ('regressor', LinearRegression())])\n",
        "\n",
        "# Model 2: Random Forest Regression\n",
        "model2 = Pipeline(steps=[('preprocessor', preprocessor),\n",
        "                         ('regressor', RandomForestRegressor(random_state=42))])\n",
        "\n",
        "# Train the models\n",
        "model1.fit(X_train, y_train)\n",
        "model2.fit(X_train, y_train)\n",
        "\n",
        "# Make predictions on the validation set\n",
        "y_pred_model1 = model1.predict(X_val)\n",
        "y_pred_model2 = model2.predict(X_val)\n",
        "\n",
        "# Evaluate models\n",
        "mae_model1 = mean_absolute_error(y_val, y_pred_model1)\n",
        "mse_model1 = mean_squared_error(y_val, y_pred_model1)\n",
        "rmse_model1 = mse_model1 ** 0.5\n",
        "\n",
        "mae_model2 = mean_absolute_error(y_val, y_pred_model2)\n",
        "mse_model2 = mean_squared_error(y_val, y_pred_model2)\n",
        "rmse_model2 = mse_model2 ** 0.5\n",
        "\n",
        "print(\"Model 1 (Linear Regression) - MAE: {:.2f}, RMSE: {:.2f}\".format(mae_model1, rmse_model1))\n",
        "print(\"Model 2 (Random Forest) - MAE: {:.2f}, RMSE: {:.2f}\".format(mae_model2, rmse_model2))\n",
        "\n",
        "# Make predictions on the test set\n",
        "test_predictions_model1 = model1.predict(test_data)\n",
        "test_predictions_model2 = model2.predict(test_data)\n",
        "\n",
        "# Create submission files\n",
        "submission_model1 = pd.DataFrame({'ID': test_data['ID'], 'AirQuality': test_predictions_model1})\n",
        "submission_model2 = pd.DataFrame({'ID': test_data['ID'], 'AirQuality': test_predictions_model2})\n",
        "\n",
        "# Save submission files to CSV\n",
        "submission_model1.to_csv(\"submission_model1_LR.csv\", index=False)\n",
        "submission_model2.to_csv(\"submission_model2_RF.csv\", index=False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4uYY7Dun8m7T",
        "outputId": "068cc3b0-24ea-4b15-d33e-70b9db7a1b7c"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model 1 (Linear Regression) - MAE: 104.85, RMSE: 259.92\n",
            "Model 2 (Random Forest) - MAE: 95.49, RMSE: 259.14\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import OneHotEncoder\n",
        "from sklearn.compose import ColumnTransformer\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.impute import SimpleImputer\n",
        "from sklearn.metrics import mean_absolute_error, mean_squared_error\n",
        "from sklearn.tree import DecisionTreeRegressor\n",
        "\n",
        "# Load the datasets\n",
        "train_data = pd.read_csv(\"train.csv\")\n",
        "test_data = pd.read_csv(\"test.csv\")\n",
        "sample_submission = pd.read_csv(\"sample_submission.csv\")\n",
        "\n",
        "# Check for missing values in the target column\n",
        "if train_data[\"target\"].isnull().any():\n",
        "    train_data.dropna(subset=[\"target\"], inplace=True)\n",
        "\n",
        "# Separate features and target column in the training data\n",
        "X = train_data.drop(columns=[\"target\"])\n",
        "y = train_data[\"target\"]\n",
        "\n",
        "# Split data into training and validation sets\n",
        "X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Preprocess categorical data using one-hot encoding\n",
        "categorical_features = ['var13', 'var15']  # Replace with actual categorical column names\n",
        "numerical_features = ['ID', 'var1','var2','var3','var4','var5','var6','var7','var8','var9','var10','var11','var12','var14']  # Replace with actual numerical column names\n",
        "\n",
        "# Create preprocessor\n",
        "preprocessor = ColumnTransformer(\n",
        "    transformers=[\n",
        "        ('num', SimpleImputer(strategy='mean'), numerical_features),\n",
        "        ('cat', OneHotEncoder(handle_unknown='ignore'), categorical_features)\n",
        "    ])\n",
        "\n",
        "# Decision Tree Regression\n",
        "model = Pipeline(steps=[('preprocessor', preprocessor),\n",
        "                        ('regressor', DecisionTreeRegressor(random_state=42))])\n",
        "\n",
        "# Train the model\n",
        "model.fit(X_train, y_train)\n",
        "\n",
        "# Make predictions on the validation set\n",
        "y_pred = model.predict(X_val)\n",
        "\n",
        "# Evaluate the model\n",
        "mae = mean_absolute_error(y_val, y_pred)\n",
        "mse = mean_squared_error(y_val, y_pred)\n",
        "rmse = mse ** 0.5\n",
        "\n",
        "print(\"Decision Tree Regression - MAE: {:.2f}, RMSE: {:.2f}\".format(mae, rmse))\n",
        "\n",
        "# Make predictions on the test set\n",
        "test_predictions = model.predict(test_data)\n",
        "\n",
        "# Create submission file\n",
        "submission = pd.DataFrame({'ID': test_data['ID'], 'AirQuality': test_predictions})\n",
        "\n",
        "# Save submission file to CSV\n",
        "submission.to_csv(\"submission_DT.csv\", index=False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "y7TunueC_pBH",
        "outputId": "e35810fc-6475-4632-826c-196183c9ec1c"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Decision Tree Regression - MAE: 153.25, RMSE: 382.37\n"
          ]
        }
      ]
    }
  ]
}